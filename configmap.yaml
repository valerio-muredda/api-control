# -----------------------------------------------------------------------------
# 2. ConfigMap
# This ConfigMap stores the HTML and JavaScript for the web application.
# The Deployment will mount this file to serve it to the user.
# -----------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-stress-tester-html
  namespace: default
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Kubernetes API Stress Tester</title>
        <!-- Use the Inter font -->
        <style>
            body {
                font-family: 'Inter', sans-serif;
            }
        </style>
        <!-- Load Tailwind CSS -->
        <script src="https://cdn.tailwindcss.com"></script>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    </head>
    <body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

        <!-- Main application container -->
        <div class="bg-white rounded-lg shadow-xl p-8 max-w-2xl w-full">
            <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">
                Kubernetes API Stress Tester
            </h1>
            <p class="text-gray-600 text-center mb-6">
                This tool generates requests to the Kubernetes API to test cluster resilience and API server throttling.
                It uses the pod's service account for authentication.
            </p>

            <!-- Configuration section -->
            <div class="space-y-4 mb-6">
                <div>
                    <label for="apiEndpoint" class="block text-sm font-medium text-gray-700">
                        API Endpoint to Target (e.g., /api/v1/pods)
                    </label>
                    <input type="text" id="apiEndpoint" value="/api/v1/pods"
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                </div>
                <div>
                    <label for="requestRate" class="block text-sm font-medium text-gray-700">
                        Requests per second
                    </label>
                    <input type="number" id="requestRate" value="100" min="1"
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                </div>
            </div>

            <!-- Control buttons -->
            <div class="flex space-x-4 mb-6">
                <button id="startButton" class="w-1/2 bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors duration-200">
                    Start Stress Test
                </button>
                <button id="stopButton" class="w-1/2 bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors duration-200" disabled>
                    Stop Stress Test
                </button>
            </div>

            <!-- Live status display -->
            <div class="bg-gray-50 rounded-lg p-4 shadow-inner">
                <h3 class="text-lg font-semibold text-gray-800 mb-2">Live Status</h3>
                <div class="flex justify-between font-mono text-sm text-gray-900 mb-2">
                    <span class="text-green-600">Successful: <span id="successCount">0</span></span>
                    <span class="text-red-600">Failed: <span id="errorCount">0</span></span>
                </div>
                <div class="text-gray-800 text-sm">
                    <span id="statusMessage" class="font-medium">Ready to start.</span>
                </div>
            </div>

            <!-- Log display -->
            <div class="mt-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-2">Logs</h3>
                <div id="logArea" class="bg-gray-900 text-white rounded-lg p-4 h-64 overflow-y-scroll text-sm font-mono">
                    <!-- Log messages will be appended here -->
                </div>
            </div>
        </div>

        <script>
            // DOM elements
            const startButton = document.getElementById('startButton');
            const stopButton = document.getElementById('stopButton');
            const apiEndpointInput = document.getElementById('apiEndpoint');
            const requestRateInput = document.getElementById('requestRate');
            const successCountSpan = document.getElementById('successCount');
            const errorCountSpan = document.getElementById('errorCount');
            const statusMessageSpan = document.getElementById('statusMessage');
            const logArea = document.getElementById('logArea');

            // State variables
            let intervalId = null;
            let successCount = 0;
            let errorCount = 0;

            // Function to log messages to the UI
            function log(message, type = 'info') {
                const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
                const logEntry = document.createElement('div');
                logEntry.textContent = `[${timestamp}] ${message}`;
                
                // Add color based on message type
                if (type === 'success') {
                    logEntry.classList.add('text-green-400');
                } else if (type === 'error') {
                    logEntry.classList.add('text-red-400');
                } else {
                    logEntry.classList.add('text-gray-300');
                }
                logArea.prepend(logEntry);
                // Limit log entries to keep the UI performant
                if (logArea.childElementCount > 100) {
                    logArea.removeChild(logArea.lastChild);
                }
            }

            // Main function to send a single request
            async function sendRequest() {
                const endpoint = apiEndpointInput.value;
                const apiServerUrl = `https://${window.location.hostname}:443${endpoint}`;
                const now = new Date();
                
                try {
                    // Use self.fetch to ensure the service account token is used
                    const response = await self.fetch(apiServerUrl, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (response.ok) {
                        successCount++;
                        successCountSpan.textContent = successCount;
                        statusMessageSpan.textContent = `Last successful request to ${endpoint}`;
                    } else {
                        errorCount++;
                        errorCountSpan.textContent = errorCount;
                        log(`API request to ${endpoint} failed with status: ${response.status} ${response.statusText}`, 'error');
                        if (response.status === 429) {
                            statusMessageSpan.textContent = 'API server is throttling requests (429 Too Many Requests).';
                        } else {
                            statusMessageSpan.textContent = `Last failed request to ${endpoint}`;
                        }
                    }
                } catch (error) {
                    errorCount++;
                    errorCountSpan.textContent = errorCount;
                    log(`API request to ${endpoint} failed: ${error.message}`, 'error');
                    statusMessageSpan.textContent = `Last failed request to ${endpoint}`;
                }
            }

            // Function to start the stress test
            function startStressTest() {
                const requestRate = parseInt(requestRateInput.value);
                if (requestRate <= 0) {
                    log('Request rate must be a positive number.', 'error');
                    return;
                }
                
                const interval = 1000 / requestRate;
                
                log(`Starting stress test at ${requestRate} requests/second.`, 'info');
                statusMessageSpan.textContent = 'Stress test in progress...';
                
                // Disable start button, enable stop button
                startButton.disabled = true;
                stopButton.disabled = false;
                
                // Start the request loop
                intervalId = setInterval(sendRequest, interval);
            }

            // Function to stop the stress test
            function stopStressTest() {
                if (intervalId) {
                    clearInterval(intervalId);
                    intervalId = null;
                }
                log('Stress test stopped.', 'info');
                statusMessageSpan.textContent = 'Ready to start.';
                
                // Disable stop button, enable start button
                startButton.disabled = false;
                stopButton.disabled = true;
            }

            // Event listeners for buttons
            startButton.addEventListener('click', startStressTest);
            stopButton.addEventListener('click', stopStressTest);
        </script>
    </body>
    </html>
---